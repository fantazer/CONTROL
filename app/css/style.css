body {
  font-family: 'Open Sans';
}
a:hover {
  text-decoration: none;
}
.bold {
  font-weight: 600;
}
.fz14 {
  font-size: 14px !important;
}
.fz10 {
  font-size: 10px !important;
}
.fz30 {
  font-size: 30px !important;
}
.fz36 {
  font-size: 36px !important;
}
.fz20 {
  font-size: 20px !important;
}
.boldfont {
  font-family: Fira Sans;
}
.flex {
  display: flex;
  justify-content: center;
  align-items: center;
}
.p60 {
  padding: 60px;
}
.tal {
  text-align: left !important;
}
.dib {
  display: inline-block;
}
.w100per {
  width: 100%;
}
@font-face {
  font-family: 'icomoon';
  src: url("/fonts/icomoon.eot?u78ibn");
  src: url("/fonts/icomoon.eot?u78ibn#iefix") format('embedded-opentype'), url("/fonts/icomoon.ttf?u78ibn") format('truetype'), url("/fonts/icomoon.woff?u78ibn") format('woff'), url("/fonts/icomoon.svg?u78ibn#icomoon") format('svg');
  font-weight: normal;
  font-style: normal;
}
[class^="icon-"],
[class*=" icon-"] {
/* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
/* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.icon-radio:before {
  content: "\e03e";
}
.icon-recent_actors:before {
  content: "\e03f";
}
.icon-repeat:before {
  content: "\e040";
}
.icon-laptop:before {
  content: "\e001";
}
.icon-briefcase:before {
  content: "\e015";
}
.icon-wallet:before {
  content: "\e016";
}
html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
img,
video,
iframe {
  max-width: 100%;
  height: auto;
  border: 0;
  -ms-interpolation-mode: bicubic;
  display: block;
}
body {
  font-family: Helvetica;
}
a {
  text-decoration: none;
}
.container {
  *zoom: 1;
  width: auto;
  max-width: 960px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}
.container:before,
.container:after {
  content: '';
  display: table;
}
.container:after {
  clear: both;
}
.top-logo {
  height: 60px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.top-logo-text {
  color: #b90a0a;
  font-family: Helvetica;
  font-size: 30px;
  font-weight: 400;
  line-height: 24px;
  font-weight: 600;
}
.top-logo-auth {
  font-family: Helvetica;
  font-size: 16px;
  font-weight: 300;
  line-height: 24px;
}
.top-logo-auth a {
  color: #222;
}
.main-baner-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 350px;
}
.main-baner {
  background-color: #044476;
  background-image: linear-gradient(to left, #3f70b8 0%, #294372 100%);
}
.main-baner-left {
  width: 50%;
}
.main-baner-left-text {
  width: 90%;
  font-weight: 400;
  line-height: 24px;
  font-size: 18px;
  color: #fff;
}
.main-baner-left-text span {
  font-size: 24px;
}
.main-baner-left-but {
  background-color: #b90a0a;
  border-radius: 3px;
  width: 200px;
  height: 45px;
  display: inline-block;
  color: #fff;
  margin-top: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all 0.4s;
}
.main-baner-left-but:hover {
  background: #750b0b;
}
.main-baner-right img {
  width: 100%;
}
.advant {
  margin: 55px 0;
}
.advant-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
}
.advant-el {
  width: 46%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 40px;
  align-items: flex-start;
}
.advant-el-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  align-items: flex-start;
}
.advant-el-left {
  margin-right: 20px;
}
.advant-el-right {
  width: 100%;
}
.advant-el-right-title {
  color: #0665ac;
  font-family: Helvetica;
  font-size: 18px;
  font-weight: 400;
  margin-bottom: 10px;
}
.advant-el-right-text {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
}
.news {
  background: #f2f2f2;
  padding: 50px 0;
}
.news-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
  font-size: 30px;
}
.news-el-wrap {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
}
.news-el {
  width: 47%;
  margin-bottom: 40px;
  margin-right: 20px;
}
.news-el-title {
  color: #0665ac;
  font-size: 18px;
  font-weight: 300;
  margin-bottom: 15px;
}
.news-el-date {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
  margin-left: 10px;
}
.news-el-text {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
}
.docs-wraper {
  padding: 50px 0;
}
.docs-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
}
.docs-el-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.docs-el {
  margin-right: 80px;
}
.docs-el a {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.docs-el a .docs-el-text {
  color: #0665ac;
  font-size: 18px;
  font-weight: 600;
}
.docs-el a .docs-el-img {
  margin-left: 20px;
}
.footer {
  background-color: #044476;
  background-image: linear-gradient(to left, #3f70b8 0%, #294372 100%);
  padding: 45px 0;
}
.footer-text {
  color: #fff;
  font-size: 18px;
  font-weight: 600;
}

/*# sourceMappingURL=data:application/json;base64, */
