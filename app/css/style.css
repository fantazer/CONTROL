body {
  font-family: 'Open Sans';
}
a:hover {
  text-decoration: none;
}
.bold {
  font-weight: 600;
}
.fz14 {
  font-size: 14px !important;
}
.fz10 {
  font-size: 10px !important;
}
.fz30 {
  font-size: 30px !important;
}
.fz36 {
  font-size: 36px !important;
}
.fz20 {
  font-size: 20px !important;
}
.boldfont {
  font-family: Fira Sans;
}
.flex {
  display: flex;
  justify-content: center;
  align-items: center;
}
.p60 {
  padding: 60px;
}
.tal {
  text-align: left !important;
}
.dib {
  display: inline-block;
}
.w100per {
  width: 100%;
}
@font-face {
  font-family: 'icomoon';
  src: url("/fonts/icomoon.eot?u78ibn");
  src: url("/fonts/icomoon.eot?u78ibn#iefix") format('embedded-opentype'), url("/fonts/icomoon.ttf?u78ibn") format('truetype'), url("/fonts/icomoon.woff?u78ibn") format('woff'), url("/fonts/icomoon.svg?u78ibn#icomoon") format('svg');
  font-weight: normal;
  font-style: normal;
}
[class^="icon-"],
[class*=" icon-"] {
/* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
/* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.icon-radio:before {
  content: "\e03e";
}
.icon-recent_actors:before {
  content: "\e03f";
}
.icon-repeat:before {
  content: "\e040";
}
.icon-laptop:before {
  content: "\e001";
}
.icon-briefcase:before {
  content: "\e015";
}
.icon-wallet:before {
  content: "\e016";
}
html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
img,
video,
iframe {
  max-width: 100%;
  height: auto;
  border: 0;
  -ms-interpolation-mode: bicubic;
  display: block;
}
body {
  font-family: Helvetica;
}
a {
  text-decoration: none;
}
.main-wraper {
  min-width: 960px;
}
.container {
  *zoom: 1;
  width: auto;
  max-width: 960px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}
.container:before,
.container:after {
  content: '';
  display: table;
}
.container:after {
  clear: both;
}
.top-logo {
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.top-logo-text {
  color: #b90a0a;
  font-family: Helvetica;
  font-size: 30px;
  font-weight: 400;
  line-height: 24px;
  font-weight: 600;
  text-align: center;
}
.top-logo-auth {
  font-family: Helvetica;
  font-size: 16px;
  font-weight: 300;
  line-height: 24px;
}
.top-logo-auth a {
  color: #222;
}
.main-baner-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 450px;
}
.main-baner {
  background-color: #044476;
  background-image: linear-gradient(to left, #3f70b8 0%, #294372 100%);
}
.main-baner-left {
  width: 50%;
}
.main-baner-left-text {
  width: 90%;
  font-weight: 400;
  line-height: 24px;
  font-size: 18px;
  color: #fff;
}
.main-baner-left-text span {
  font-size: 24px;
}
.main-baner-left-but {
  background-color: #b90a0a;
  border-radius: 3px;
  width: 250px;
  height: 65px;
  display: inline-block;
  color: #fff;
  margin-top: 20px;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all 0.4s;
}
.main-baner-left-but:hover {
  background: #750b0b;
}
.main-baner-right img {
  width: 100%;
}
.advant {
  margin: 55px 0;
}
.advant-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
}
.advant-el {
  width: 46%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 40px;
  align-items: flex-start;
}
.advant-el-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  align-items: flex-start;
}
.advant-el-left {
  margin-right: 20px;
  width: 20%;
}
.advant-el-right {
  width: 100%;
}
.advant-el-right-title {
  color: #0665ac;
  font-family: Helvetica;
  font-size: 18px;
  font-weight: 400;
  margin-bottom: 10px;
}
.advant-el-right-text {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
}
.news {
  background: #f2f2f2;
  padding: 50px 0;
}
.news-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
  font-size: 30px;
  display: inline-block;
  text-align: center;
  width: 100%;
}
.news-el-wrap {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  align-items: flex-start;
}
.news-el {
  width: 47%;
  margin-bottom: 40px;
  margin-right: 20px;
}
.news-el-title {
  color: #0665ac;
  font-size: 18px;
  font-weight: 300;
  margin-bottom: 15px;
}
.news-el-date {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
  margin-left: 10px;
}
.news-el-text {
  color: #444;
  font-family: Helvetica;
  font-size: 14px;
  font-weight: 300;
}
.docs-wraper {
  padding: 50px 0;
}
.docs {
  background-color: #f2f2f2;
  margin-bottom: 6s 0px;
}
.docs-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
}
.docs-el-wrap {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
}
.docs-el {
  width: 45%;
  margin-bottom: 40px;
}
.docs-el a {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.docs-el a .docs-el-text {
  color: #0665ac;
  font-size: 18px;
  font-weight: 600;
}
.docs-el a .docs-el-img {
  margin-right: 20px;
}
.footer {
  background-color: #044476;
  background-image: linear-gradient(to left, #3f70b8 0%, #294372 100%);
  padding: 45px 0;
}
.footer-text {
  color: #fff;
  font-size: 18px;
  font-weight: 600;
}
.breadcrumbs {
  background: #f2f2f2;
  padding: 30px;
}
.breadcrumbs-row a {
  color: #222;
  margin-right: 20px;
  position: relative;
}
.breadcrumbs-row a:after {
  content: '/';
  position: absolute;
  right: -10px;
}
.breadcrumbs-row a:last-child {
  color: #0665ac;
}
.breadcrumbs-row a:last-child:after {
  content: '';
}
.changes-title {
  color: #b90a0a;
  font-size: 30px;
  font-weight: 400;
  text-align: center;
  margin-bottom: 30px;
  font-weight: 600;
  margin: 30px 0;
}
.table-change {
  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  margin-bottom: 18px;
  border: 1px solid #ddd;
  border-collapse: separate;
  *border-collapse: collapsed;
  border-radius: 4px;
  margin-bottom: 50px;
  font-size: 14px;
}
.table-change th,
.table-change td {
  padding: 8px;
  line-height: 18px;
  text-align: left;
  vertical-align: top;
  border-top: 1px solid #ddd;
}
.table-change th {
  font-weight: bold;
}
.table-change thead th {
  vertical-align: bottom;
}
.table-change thead:first-child tr th,
.table-change thead:first-child tr td {
  border-top: 0;
}
.table-change tbody + tbody {
  border-top: 2px solid #ddd;
}
.table-change th + th,
.table-change td + td,
.table-change th + td,
.table-change td + th {
  border-left: 1px solid #ddd;
}
.table-change thead:first-child tr:first-child th,
.table-change tbody:first-child tr:first-child th,
.table-change tbody:first-child tr:first-child td {
  border-top: 0;
}
.table-change thead:first-child tr:first-child th:first-child,
.table-change tbody:first-child tr:first-child td:first-child {
  border-radius: 4px 0 0 0;
}
.table-change thead:first-child tr:first-child th:last-child,
.table-change tbody:first-child tr:first-child td:last-child {
  border-radius: 0 4px 0 0;
}
.table-change thead:last-child tr:last-child th:first-child,
.table-change tbody:last-child tr:last-child td:first-child {
  border-radius: 0 0 0 4px;
}
.table-change thead:last-child tr:last-child th:last-child,
.table-change tbody:last-child tr:last-child td:last-child {
  border-radius: 0 0 4px 0;
}
.table-change tbody tr:nth-child(odd) td,
.table-change tbody tr:nth-child(odd) th {
  background-color: #f9f9f9;
}
.table-change tbody tr:hover td,
.table-change tbody tr:hover th {
  background-color: #f5f5f5;
}
.table-change th {
  font-size: 16px;
  color: #fff;
  background: #0665ac;
  font-weight: 400;
}
.table-change tr td {
  padding: 10px;
  color: #222;
}
.table-change tr td:first-child {
  width: 150px;
}
.footer__cont {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.footer-link {
  color: #fff;
  background: #b90a0a;
  display: inline-block;
  padding: 15px 40px;
}

/*# sourceMappingURL=data:application/json;base64, */
